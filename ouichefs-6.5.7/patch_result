WARNING: Missing commit description - Add an appropriate one

WARNING: Missing or malformed SPDX-License-Identifier tag in line 1
#5: FILE: file.c:1:
+

WARNING: Misplaced SPDX-License-Identifier tag - use line 1 instead
#7: FILE: file.c:3:
+// SPDX-License-Identifier: GPL-2.0

WARNING: Block comments should align the * on each line
#304: FILE: file.c:229:
+/*Create the block entry based on the 12 bits of the block size
+* and the 20 bits of the block number

WARNING: line length of 108 exceeds 100 columns
#323: FILE: file.c:248:
+/*In summarry this function enables users to retrieve data from a file by copying it into a provided buffer.

WARNING: Block comments should align the * on each line
#324: FILE: file.c:249:
+/*In summarry this function enables users to retrieve data from a file by copying it into a provided buffer.
+*Here's a concisely its functionality:

WARNING: line length of 122 exceeds 100 columns
#328: FILE: file.c:253:
+*- It reads data from the determined data block into the user-provided buffer, ensuring not to read beyond the file's end.

WARNING: line length of 126 exceeds 100 columns
#330: FILE: file.c:255:
+*- It returns the number of bytes read, indicating a successful operation, or an error code if encountered during the process.

WARNING: Block comments use * on subsequent lines
#332: FILE: file.c:257:
+/*
+/*

WARNING: Block comments use * on subsequent lines
#333: FILE: file.c:258:
+/*
+static ssize_t ouichefs_read(struct file *filep, char __user *buf, size_t len, loff_t *ppos)

WARNING: Block comments use a trailing */ on a separate line
#382: FILE: file.c:307:
+}*/

WARNING: Block comments should align the * on each line
#385: FILE: file.c:310:
+/*Read function for a file system implemented in the Linux kernel.
+*It is responsible for reading a fragment of data from a file, with additional

WARNING: Block comments use * on subsequent lines
#407: FILE: file.c:332:
+	/*if (*ppos >= inode->i_size) {
+		return bytes_read;

WARNING: Block comments use a trailing */ on a separate line
#408: FILE: file.c:333:
+	}*/

WARNING: Missing a blank line after declarations
#434: FILE: file.c:359:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(bno));
+	if (!bh) {

WARNING: braces {} are not necessary for single statement blocks
#447: FILE: file.c:372:
+				if (start == -1) {
+					start = i; // Start of non-zero data
+				}

WARNING: braces {} are not necessary for single statement blocks
#452: FILE: file.c:377:
+				if (start != -1) {
+					break; // End of non-zero data
+				}

WARNING: Missing a blank line after declarations
#497: FILE: file.c:422:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(block_entry));
+	if (!bh) {

WARNING: Block comments should align the * on each line
#525: FILE: file.c:436:
+/*
+*This function does the basic write operation without optization.

ERROR: patch seems to be corrupt (line wrapped?)
#539: FILE: file.c:448:
\ Pas de fin de ligne Ã  la fin du fichier

WARNING: Block comments use * on subsequent lines
#541: FILE: file.c:450:
+/*
+static ssize_t ouichefs_write(struct file *filep, const char __user *buf, size_t len, loff_t *ppos)

WARNING: Block comments use a trailing */ on a separate line
#641: FILE: file.c:550:
+}*/

WARNING: line length of 107 exceeds 100 columns
#643: FILE: file.c:552:
+* This function does the write operation by inserting blocs from position where one wants to write content.

WARNING: Block comments should align the * on each line
#643: FILE: file.c:552:
+/*
+* This function does the write operation by inserting blocs from position where one wants to write content.

WARNING: line length of 110 exceeds 100 columns
#645: FILE: file.c:554:
+* This function extends the behavior of writing data to a file in the "ouichefs" filesystem. Here's a summary:

WARNING: line length of 147 exceeds 100 columns
#646: FILE: file.c:555:
+* 1- Space Check: It ensures that there's enough space in the filesystem to accommodate the write operation. If not, it stops and returns an error.

WARNING: line length of 113 exceeds 100 columns
#647: FILE: file.c:556:
+* 2- Position Update: If the file is opened in append mode, it updates the write position to the end of the file.

WARNING: line length of 115 exceeds 100 columns
#648: FILE: file.c:557:
+* 3- Index Block Read: It reads the index block of the file to locate the data blocks that hold the file's content.

WARNING: line length of 134 exceeds 100 columns
#649: FILE: file.c:558:
+* 4- Data Block Location: Based on the current write position, it identifies the specific data block where the data should be written.

WARNING: line length of 202 exceeds 100 columns
#650: FILE: file.c:559:
+* 5- Fragmentation Handling: If the data to be written would cause fragmentation (i.e., if there isn't enough contiguous space in the current block), it rearranges the blocks to make space for the data.

WARNING: line length of 156 exceeds 100 columns
#651: FILE: file.c:560:
+* 6- Data Writing: It copies the data from the user-provided buffer into the data block buffer. If fragmentation occurs, it handles the copying accordingly.

WARNING: line length of 151 exceeds 100 columns
#652: FILE: file.c:561:
+* 7- Metadata Update: After writing the data, it updates the metadata associated with the block to reflect the new size and other relevant information.

WARNING: line length of 114 exceeds 100 columns
#653: FILE: file.c:562:
+* 8- Cleanup: Once the write operation is completed, it releases any buffers or resources used during the process.

WARNING: line length of 146 exceeds 100 columns
#654: FILE: file.c:563:
+* 9- Return: Finally, it returns the number of bytes successfully written to the file, or an error code if any issues occurred during the process.

WARNING: Missing a blank line after declarations
#673: FILE: file.c:582:
+	int bno;
+	if (*ppos + len > OUICHEFS_MAX_FILESIZE)

WARNING: Missing a blank line after declarations
#686: FILE: file.c:595:
+	bool app = (filep->f_flags & O_APPEND) != 0;
+	if (app) {

WARNING: braces {} are not necessary for single statement blocks
#686: FILE: file.c:595:
+	if (app) {
+		*ppos = inode->i_size;
+	}

WARNING: Missing a blank line after declarations
#708: FILE: file.c:617:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(bno));
+	if (!bh) {

WARNING: Missing a blank line after declarations
#717: FILE: file.c:626:
+	size_t number_of_blocks_needed = ((len + offset) / OUICHEFS_BLOCK_SIZE);
+	if (number_of_blocks_needed + inode->i_blocks >

WARNING: braces {} are not necessary for single statement blocks
#735: FILE: file.c:644:
+			if (position_to_copy != -1) {
+				break;
+			}

WARNING: Missing a blank line after declarations
#748: FILE: file.c:657:
+			int bno_bis = get_free_block(sbi);
+			if (!bno_bis) {

WARNING: Missing a blank line after declarations
#767: FILE: file.c:676:
+		char *ptr_to_copy_from = bh->b_data + position_to_copy;
+		memcpy(tmpbh->b_data, ptr_to_copy_from, cmpt);

WARNING: Missing a blank line after declarations
#773: FILE: file.c:682:
+		uint32_t block_size = get_block_size(last_inserted_block);
+		block_size = block_size + (uint32_t)cmpt;

WARNING: Missing a blank line after declarations
#782: FILE: file.c:691:
+		uint32_t block_size_fragment = get_block_size(bno);
+		block_size_fragment = block_size_fragment - (uint32_t)cmpt;

WARNING: Missing a blank line after declarations
#804: FILE: file.c:713:
+	uint32_t block_size_fragment = get_block_size(bno);
+	block_size_fragment = (block_size_fragment + (uint32_t)bytes_write);

WARNING: braces {} are not necessary for single statement blocks
#808: FILE: file.c:717:
+	if (*ppos > inode->i_size) {
+		inode->i_size = *ppos;
+	}

WARNING: Missing a blank line after declarations
#813: FILE: file.c:722:
+	uint32_t nr_blocks_old = inode->i_blocks;
+	if (inode->i_blocks == 1 || inode->i_blocks == 0) {

WARNING: braces {} are not necessary for any arm of this statement
#813: FILE: file.c:722:
+	if (inode->i_blocks == 1 || inode->i_blocks == 0) {
[...]
+	} else {
[...]

WARNING: 'informations' may be misspelled - perhaps 'information'?
#835: FILE: file.c:744:
+* informations regarding input file blocks.
   ^^^^^^^^^^^^

WARNING: Block comments should align the * on each line
#835: FILE: file.c:744:
+/* This function implements an ioctl to handle a command on the file system to check
+* informations regarding input file blocks.

WARNING: line length of 125 exceeds 100 columns
#837: FILE: file.c:746:
+* 1- Function Purpose: The `ouichefs_ioctl` function is responsible for handling IOCTL commands in the "ouichefs" filesystem.

WARNING: line length of 133 exceeds 100 columns
#838: FILE: file.c:747:
+* 2- Initialization: It initializes variables and allocates memory for an `ouichefs_ioctl_info` structure to store block information.

WARNING: line length of 162 exceeds 100 columns
#839: FILE: file.c:748:
+* 3- Command Validation: It checks if the received command is `OUICHEFS_IOC_GET_INFO`. If not, it returns `-ENOTTY`, indicating that the command is not supported.

WARNING: line length of 153 exceeds 100 columns
#840: FILE: file.c:749:
+* 4- Reading Index Block: It reads the index block of the file associated with the given inode to retrieve information about the blocks used by the file.

WARNING: line length of 114 exceeds 100 columns
#841: FILE: file.c:750:
+* 5- Iterating Over Blocks: It iterates through the entries in the index block to extract block numbers and sizes.

WARNING: line length of 243 exceeds 100 columns
#842: FILE: file.c:751:
+* 6- Collecting Block Information: For each non-zero block entry, it stores the block number and effective size in the `ouichefs_ioctl_info` structure. It also counts partially filled blocks and calculates internal fragmentation if applicable.

WARNING: line length of 131 exceeds 100 columns
#843: FILE: file.c:752:
+* 7- Copying to User Space: It copies the collected block information from the kernel space to the user space using `copy_to_user`.

WARNING: line length of 213 exceeds 100 columns
#845: FILE: file.c:754:
+* 9- Return Value: If the copy to user space is successful, it returns `0` to indicate success. Otherwise, it returns `-EFAULT` if there's a memory copy error or `-EIO` if there's an error reading the index block.

WARNING: braces {} are not necessary for single statement blocks
#858: FILE: file.c:767:
+	if (!info) {
+		return -ENOMEM;
+	}

WARNING: Missing a blank line after declarations
#879: FILE: file.c:788:
+		uint32_t entry = file_index->blocks[i];
+		if (entry == 0) {

WARNING: braces {} are not necessary for single statement blocks
#879: FILE: file.c:788:
+		if (entry == 0) {
+			continue;
+		}

WARNING: Block comments should align the * on each line
#908: FILE: file.c:817:
+/*Called by ouichefs_ioctl_defragmentation function and helps to move all non zero
+*data to the beginning of the block and zeroing out the remaining space:

WARNING: Missing a blank line after declarations
#927: FILE: file.c:836:
+	int active = 0;
+	if (get_block_size(current_block) == 0) {

WARNING: braces {} are not necessary for single statement blocks
#927: FILE: file.c:836:
+	if (get_block_size(current_block) == 0) {
+		return 0;
+	}

WARNING: braces {} are not necessary for single statement blocks
#931: FILE: file.c:840:
+	if (!bh) {
+		return -EIO;
+	}

WARNING: braces {} are not necessary for any arm of this statement
#937: FILE: file.c:846:
+			if (active) {
[...]
+			} else {
[...]

WARNING: Block comments should align the * on each line
#972: FILE: file.c:881:
+/*This function implements an ioctl to handle the defragmentation of the file blocks
+*Here are its steps:

WARNING: Prefer using '"%s...", __func__' to using 'ouichefs_ioctl_defragmentation', this function's name, in a string
#978: FILE: file.c:887:
+	pr_info("inside ouichefs_ioctl_defragmentation()");

WARNING: braces {} are not necessary for single statement blocks
#988: FILE: file.c:897:
+	if (!bh_index) {
+		return -EIO;
+	}

WARNING: Missing a blank line after declarations
#993: FILE: file.c:902:
+	uint32_t current_block;
+	for (int i = 0; i < (OUICHEFS_BLOCK_SIZE >> 2); i++) {

WARNING: braces {} are not necessary for single statement blocks
#995: FILE: file.c:904:
+		if (current_block == 0) {
+			break;
+		}

WARNING: Missing a blank line after declarations
#999: FILE: file.c:908:
+		int n = apply_contigue(current_block, sb);
+		pr_info("resultat first contigue: %d\n", n);

WARNING: Missing a blank line after declarations
#1005: FILE: file.c:914:
+	int copied_so_far = 0;
+	for (int i = 0; i < (OUICHEFS_BLOCK_SIZE >> 2); i++) {

WARNING: Missing a blank line after declarations
#1008: FILE: file.c:917:
+		uint32_t current_block = file_index->blocks[i];
+		if (current_block == 0) {

WARNING: braces {} are not necessary for single statement blocks
#1008: FILE: file.c:917:
+		if (current_block == 0) {
+			break;
+		}

WARNING: Missing a blank line after declarations
#1027: FILE: file.c:936:
+		int j = i + 1;
+		for (; j < (OUICHEFS_BLOCK_SIZE >> 2); j++) {

WARNING: Missing a blank line after declarations
#1033: FILE: file.c:942:
+			size_t bytes_to_copy = min(size_left, size_from);
+			bh_bis = sb_bread(sb, get_block_number(from_block));

WARNING: Missing a blank line after declarations
#1049: FILE: file.c:958:
+				int x = apply_contigue(from_block, sb);
+				pr_info("resultat second contigue: %d\n", x);

ERROR: Missing Signed-off-by: line(s)

total: 2 errors, 77 warnings, 1110 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

patchfile.patch has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
